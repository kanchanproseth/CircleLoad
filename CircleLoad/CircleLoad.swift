//
//  CircleLoad.swift
//  CircleLoad
//
//  Created by Proseth on 3/27/17.
//  Copyright Â© 2017 NANITA co .ltd. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CircleLoad : NSObject {

    //// Cache

    private struct Cache {
        static let color: UIColor = UIColor(red: 0.500, green: 0.500, blue: 0.500, alpha: 0.000)
        static let color2: UIColor = UIColor(red: 0.254, green: 0.566, blue: 0.739, alpha: 1.000)
        static let color3: UIColor = UIColor(red: 0.929, green: 0.010, blue: 0.010, alpha: 0.652)
        static let color4: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.564, alpha: 0.711)
        static let shadow2: NSShadow = NSShadow(color: UIColor.black.withAlphaComponent(0.38), offset: CGSize(width: 3, height: 3), blurRadius: 5)
    }

    //// Colors

    public dynamic class var color: UIColor { return Cache.color }
    public dynamic class var color2: UIColor { return Cache.color2 }
    public dynamic class var color3: UIColor { return Cache.color3 }
    public dynamic class var color4: UIColor { return Cache.color4 }

    //// Shadows

    public dynamic class var shadow2: NSShadow { return Cache.shadow2 }

    //// Drawing Methods

    public dynamic class func drawCanvas1(master:CGFloat = 0.538) {
        let targetFrame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 250)
        let resizing: ResizingBehavior = .aspectFit
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 250, height: 250), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 250, y: resizedFrame.height / 250)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 250, resizedFrame.height / 250)



        //// Variable Declarations
        let master = master
        let rect1: CGFloat = master * 90
        let rect2: CGFloat = master * 90
        let rect3: CGFloat = master * 90
        let rect4: CGFloat = master * 90
        let recr11: CGFloat = master * 90
        let rect22: CGFloat = master * 90
        let rect33: CGFloat = master * 90
        let rect44: CGFloat = master * 90

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 230, height: 230))
        context.saveGState()
        context.setShadow(offset: CGSize(width: CircleLoad.shadow2.shadowOffset.width * resizedShadowScale, height: CircleLoad.shadow2.shadowOffset.height * resizedShadowScale), blur: CircleLoad.shadow2.shadowBlurRadius * resizedShadowScale, color: (CircleLoad.shadow2.shadowColor as! UIColor).cgColor)
        UIColor.gray.setStroke()
        ovalPath.lineWidth = 8.5
        ovalPath.stroke()
        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 10, y: 10, width: 230, height: 230)
        let oval3Path = UIBezierPath()
        oval3Path.addArc(withCenter: CGPoint(x: oval3Rect.midX, y: oval3Rect.midY), radius: oval3Rect.width / 2, startAngle: -rect2 * CGFloat.pi/180, endAngle: -(rect22 - 90) * CGFloat.pi/180, clockwise: true)

        CircleLoad.color.setFill()
        oval3Path.fill()
        CircleLoad.color2.setStroke()
        oval3Path.lineWidth = 7.5
        oval3Path.lineCapStyle = .round
        oval3Path.lineJoinStyle = .bevel
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Rect = CGRect(x: 10, y: 10, width: 230, height: 230)
        let oval4Path = UIBezierPath()
        oval4Path.addArc(withCenter: CGPoint(x: oval4Rect.midX, y: oval4Rect.midY), radius: oval4Rect.width / 2, startAngle: -(rect3 - 90) * CGFloat.pi/180, endAngle: -(rect33 + 180) * CGFloat.pi/180, clockwise: true)

        CircleLoad.color.setFill()
        oval4Path.fill()
        UIColor.green.setStroke()
        oval4Path.lineWidth = 7.5
        oval4Path.lineCapStyle = .round
        oval4Path.lineJoinStyle = .bevel
        oval4Path.stroke()


        //// Oval 5 Drawing
        let oval5Rect = CGRect(x: 10, y: 10, width: 230, height: 230)
        let oval5Path = UIBezierPath()
        oval5Path.addArc(withCenter: CGPoint(x: oval5Rect.midX, y: oval5Rect.midY), radius: oval5Rect.width / 2, startAngle: -(rect4 + 180) * CGFloat.pi/180, endAngle: -(rect44 + 90) * CGFloat.pi/180, clockwise: true)

        CircleLoad.color.setFill()
        oval5Path.fill()
        UIColor.darkGray.setStroke()
        oval5Path.lineWidth = 7.5
        oval5Path.lineCapStyle = .round
        oval5Path.stroke()


        //// Oval 2 Drawing
        let oval2Rect = CGRect(x: 10, y: 10, width: 230, height: 230)
        let oval2Path = UIBezierPath()
        oval2Path.addArc(withCenter: CGPoint(x: oval2Rect.midX, y: oval2Rect.midY), radius: oval2Rect.width / 2, startAngle: -(rect1 + 90) * CGFloat.pi/180, endAngle: -recr11 * CGFloat.pi/180, clockwise: true)

        CircleLoad.color.setFill()
        oval2Path.fill()
        UIColor.red.setStroke()
        oval2Path.lineWidth = 7.5
        oval2Path.lineCapStyle = .round
        oval2Path.stroke()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
