//
//  StyleKitName.swift
//  ProjectName
//
//  Created by Proseth on 4/10/17.
//  Copyright Â© 2017 NANITA co .ltd. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static let circleColor: UIColor = UIColor(red: 0.690, green: 0.761, blue: 0.000, alpha: 1.000)
    }

    //// Colors

    public dynamic class var circleColor: UIColor { return Cache.circleColor }

    //// Drawing Methods

    public dynamic class func drawRequestAnimation(strokeSize: CGFloat,master:CGFloat, targetframeWidth: CGFloat, targetframeHeight:CGFloat, ovalWidth:CGFloat, ovalHeight:CGFloat ) {
        //// General Declarations
        let resizing: ResizingBehavior = .aspectFit, master = master
        let targetFrame: CGRect = CGRect(x: 0, y: 0, width: targetframeWidth, height: targetframeHeight)
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: targetframeWidth, height: targetframeHeight), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)



        //// Variable Declarations
        let circle: CGFloat = master * 360

        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 22.5, y: 22.5)
        context.rotate(by: -360 * CGFloat.pi/180)

        let ovalRect = CGRect(x: 0, y: 0, width: ovalWidth, height: ovalHeight)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -89 * CGFloat.pi/180, endAngle: -(circle + 90) * CGFloat.pi/180, clockwise: true)

        StyleKitName.circleColor.setStroke()
        ovalPath.lineWidth = strokeSize
        ovalPath.lineCapStyle = .round
        ovalPath.stroke()

        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 22.5, y: 22.5, width: ovalWidth, height: ovalHeight))
        StyleKitName.circleColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.lineCapStyle = .round
        oval2Path.stroke()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
